"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cerebro_tools_1 = require("cerebro-tools");
const os = require("os");
const REGEXP = /fs\s(.*)/;
const SEARCH_CMD = 'fd';
const OPEN_CMD = os.platform() === 'linux' ? 'xdg-open' : 'open';
function queryFiles(query, display) {
    return __awaiter(this, void 0, void 0, function* () {
        const stdout = yield cerebro_tools_1.shellCommand(`${SEARCH_CMD} '${query}'`);
        const files = stdout.split('\n').map((path) => {
            return {
                title: path,
                onSelect: () => cerebro_tools_1.shellCommand(`${OPEN_CMD} '${path}'`)
            };
        });
        display(files);
        console.log(open);
    });
}
function fn({ term, display }) {
    const match = term.match(REGEXP);
    if (match) {
        const query = match[1];
        if (query.length >= 3) {
            queryFiles(query, display);
        }
    }
}
exports.default = {
    name: 'cerebro-file-search',
    fn,
    keyword: 'fs'
};
